<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zachary zl</title>
  <subtitle>East z</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zachary05.github.io/"/>
  <updated>2016-07-22T17:25:53.000Z</updated>
  <id>http://zachary05.github.io/</id>
  
  <author>
    <name>Zachary_zl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iTerm2 一款terminal 毕竟颜值高</title>
    <link href="http://zachary05.github.io/2016/07/23/iTerm2-%E6%AF%95%E7%AB%9F%E9%A2%9C%E5%80%BC%E9%AB%98/"/>
    <id>http://zachary05.github.io/2016/07/23/iTerm2-毕竟颜值高/</id>
    <published>2016-07-22T17:21:11.000Z</published>
    <updated>2016-07-22T17:25:53.000Z</updated>
    
    <content type="html">&lt;p&gt;一直都用的是Mac自带的terminal,直到我发现了iTerm2,最喜欢的就是它这个快捷呼出的功能，一道terminal从天而降的既视感，就像天外来物，超级炫酷。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/iterm21.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后我就翻了一下&lt;a href=&quot;https://www.iterm2.com/features.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2&lt;/a&gt;的官网，看看有什么好玩的特征。&lt;/p&gt;
&lt;p&gt;﻿首先就是这个天外来物了，炫上天。其实主要是方便快捷，自己设置快捷键，就可以快速呼出终端。&lt;/p&gt;
&lt;p&gt;⌘+d 左右分屏&lt;/p&gt;
&lt;p&gt;⌘+shift+d 上下分屏，像这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/iterm22.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;⌘+enter 切到全屏&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/iterm23.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;⌘+f，快速查找，并且高亮&lt;br&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/iterm24.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;⌘+； 自动补全&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/iterm25.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;⌘+shift+h 显示历史输入记录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/iterm26.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;⌘+/ 显示光标&lt;br&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/iterm27.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;⌘+n 新建窗口&lt;/p&gt;
&lt;p&gt;⌘+t 新建标签&lt;/p&gt;
&lt;p&gt;⌘+b 查看历史&lt;/p&gt;
&lt;p&gt;选中即复制，直接按⌘+v就是粘贴&lt;/p&gt;
&lt;p&gt;还有一些功能自己就可以⌘+,跳转到自行设置啦~&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一直都用的是Mac自带的terminal,直到我发现了iTerm2,最喜欢的就是它这个快捷呼出的功能，一道terminal从天而降的既视感，就像天外来物，超级炫酷。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com
    
    </summary>
    
    
      <category term="工具" scheme="http://zachary05.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Emmet - 前端神器</title>
    <link href="http://zachary05.github.io/2016/07/21/Emmet-%E5%89%8D%E7%AB%AF%E7%A5%9E%E5%99%A8/"/>
    <id>http://zachary05.github.io/2016/07/21/Emmet-前端神器/</id>
    <published>2016-07-20T17:14:58.000Z</published>
    <updated>2016-07-20T17:21:11.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Emmet-前端神器&quot;&gt;&lt;a href=&quot;#Emmet-前端神器&quot; class=&quot;headerlink&quot; title=&quot;Emmet 前端神器&quot;&gt;&lt;/a&gt;Emmet 前端神器&lt;/h2&gt;&lt;p&gt;官网给出的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Emmet — the essential toolkit for web-developers&lt;/p&gt;
&lt;p&gt;(Emmet - 超级重要的前端者的开发工具&lt;/p&gt;
&lt;p&gt;Emmet is a plugin for many popular text editors which greatly improves HTML &amp;amp; CSS workflow&lt;/p&gt;
&lt;p&gt;(Emmet 是一个插件，支持流行的文本编辑器，它能极大地提高 HTML &amp;amp; CSS 的编程流程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总而言之，就是很牛逼。可以减少大量重复输入的操作。&lt;/p&gt;
&lt;p&gt;使用方法也很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入Emmet命令，按&lt;code&gt;tab&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Emmet命令不能有空格，不能换行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Emmet-常用方法总结&quot;&gt;&lt;a href=&quot;#Emmet-常用方法总结&quot; class=&quot;headerlink&quot; title=&quot;Emmet 常用方法总结&quot;&gt;&lt;/a&gt;Emmet 常用方法总结&lt;/h2&gt;&lt;h3 id=&quot;Emmet-HTML&quot;&gt;&lt;a href=&quot;#Emmet-HTML&quot; class=&quot;headerlink&quot; title=&quot;Emmet - HTML&quot;&gt;&lt;/a&gt;Emmet - HTML&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;! // 自动生成HTML文档初始结构&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
      &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;link:css&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;meta:vp&lt;/code&gt;        &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;div.i#i //自动生成带有类名和id名的标签&lt;/code&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;i&amp;quot; id=&amp;quot;i&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;     
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;div.i#i+div.i1#i1 //‘+’代表兄弟标签&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;i&amp;quot; id=&amp;quot;i&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;i1&amp;quot; id=&amp;quot;i1&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;div.i#i&amp;gt;div.i1#i1 //&amp;#39;&amp;gt;&amp;#39;代表子标签&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;i&amp;quot; id=&amp;quot;i&amp;quot;&amp;gt;
     &amp;lt;div class=&amp;quot;i1&amp;quot; id=&amp;quot;i1&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;div.i#i&amp;gt;div.i1#i1^div.i2#i2 //&amp;#39;^&amp;#39;代表上级标签&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;i&amp;quot; id=&amp;quot;i&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;i1&amp;quot; id=&amp;quot;i1&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
   &amp;lt;div class=&amp;quot;i2&amp;quot; id=&amp;quot;i2&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a*3 //&amp;#39;*&amp;#39;代表重复次数&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;(div&amp;gt;a*3)+div //&amp;#39;()&amp;#39;代表分组，因此前面一组与后面的div是兄弟标签&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
       &amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a[href=&amp;quot;#&amp;quot; title=&amp;quot;hi&amp;quot;] //&amp;#39;[attr]代表标签内的属性&amp;#39;&lt;/code&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;#&amp;quot; title=&amp;quot;hi&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;li.i$*3 //&amp;#39;$&amp;#39;代表编号，自动生成编号&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;li class=&amp;quot;i1&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
 &amp;lt;li class=&amp;quot;i2&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li class=&amp;quot;i3&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;li.i$@-*3 //&amp;#39;@-&amp;#39;代表倒序编号&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;li class=&amp;quot;i3&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;i2&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;i1&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;li.i$@3*3 //&amp;#39;@n&amp;#39;代表从n开始编号&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;li class=&amp;quot;i3&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;i4&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;i5&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;p{hello,world} //&amp;quot;{}&amp;quot;代表文本内容&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;hello,world&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;input &amp;amp; button&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inp = input:t = input:text
input:p = input:password
input:c = input:checkbox
input:f = input:file
input:s = input:submit
input:i = input:image
input:b = input:button
btn:s = button:s = button:submit
btn:r = button:r = button:radio
btn:d = button:d = button:disabled        
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Emmet-CSS&quot;&gt;&lt;a href=&quot;#Emmet-CSS&quot; class=&quot;headerlink&quot; title=&quot;Emmet - CSS&quot;&gt;&lt;/a&gt;Emmet - CSS&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;w100&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;width: 100px;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;w100p&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;width: 100%;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;w100+w100p&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;width: 100px;
  width: 100%;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;m10-10 //用&amp;#39;-&amp;#39;连接多个属性&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;margin: 10px 10px;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;m10--10&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;margin: 10px -10px;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;m10em10em //如果带有单位则可以省略&amp;#39;-&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;margin: 10em 10em;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@font-face {
      font-family:;
      src:url();
}   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@f+&lt;/code&gt;    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@font-face {
     font-family: &amp;apos;FontName&amp;apos;;
      src: url(&amp;apos;FileName.eot&amp;apos;);
      src: url(&amp;apos;FileName.eot?#iefix&amp;apos;) format(&amp;apos;embedded-opentype&amp;apos;),
     url(&amp;apos;FileName.woff&amp;apos;) format(&amp;apos;woff&amp;apos;),
     url(&amp;apos;FileName.ttf&amp;apos;) format(&amp;apos;truetype&amp;apos;),
     url(&amp;apos;FileName.svg#FontName&amp;apos;) format(&amp;apos;svg&amp;apos;);
      font-style: normal;
      font-weight: normal;
}    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-border-radius //加上&amp;#39;-&amp;#39;可以自动生成前缀&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-webkit-border-radius: ;
  -moz-border-radius: ;
-ms-border-radius: ;
  -o-border-radius: ;
  border-radius: ;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lg(left,#83c9d2,50%,#4e7b85) //自动生成背景渐变&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;background-image: -webkit-linear-gradient(left, #83c9d2, 50%, #4e7b85);
 background-image: -o-linear-gradient(left, #83c9d2, 50%, #4e7b85);
 background-image: linear-gradient(to right, #83c9d2, 50%, #4e7b85);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Emmet-Bonus&quot;&gt;&lt;a href=&quot;#Emmet-Bonus&quot; class=&quot;headerlink&quot; title=&quot;Emmet - Bonus&quot;&gt;&lt;/a&gt;Emmet - Bonus&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lorem //生成Lorem，并且可以指定数量，如lorem5&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Recusandae voluptatem aperiam obcaecati consequatur veniam maiores temporibus, similique. Obcaecati a voluptate, fuga quia modi nostrum sint tenetur laboriosam voluptas porro eaque.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;隐式标签 //Emmet会自动根据父标签判定当前标签类别。&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;默认为 div
ul 或 ol 下默认为 li
table 下默认为 tr
tr 下默认为 td
select 或 optgroup 下默认为 option
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Lorem_ipsum&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lorem in Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.emmet.io/cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emmet Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Emmet-前端神器&quot;&gt;&lt;a href=&quot;#Emmet-前端神器&quot; class=&quot;headerlink&quot; title=&quot;Emmet 前端神器&quot;&gt;&lt;/a&gt;Emmet 前端神器&lt;/h2&gt;&lt;p&gt;官网给出的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Emmet — t
    
    </summary>
    
    
      <category term="plugin" scheme="http://zachary05.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>gulp 学习总结</title>
    <link href="http://zachary05.github.io/2016/07/19/gulp-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://zachary05.github.io/2016/07/19/gulp-学习总结/</id>
    <published>2016-07-19T15:47:34.000Z</published>
    <updated>2016-07-19T15:53:02.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;gulp是基于Node实现Web前端自动化开发的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得gulp就是用来自动压缩js/css/images，自动编译sass/less, 自动加前缀。这些功能能让文件更小，提高网页加载速度，同时都是gulp自动完成的，所以很爽。&lt;/p&gt;
&lt;h3 id=&quot;安装gulp&quot;&gt;&lt;a href=&quot;#安装gulp&quot; class=&quot;headerlink&quot; title=&quot;安装gulp&quot;&gt;&lt;/a&gt;安装gulp&lt;/h3&gt;&lt;p&gt;gulp是基于Node, 所以得先安装Node再安装gulp&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install gulp -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;开发环境中，可以在开发项目的目录安装：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm init //首先初始化&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;初始化之后会自动生成&lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install gulp --save-dev //gulp将自动写入package.json中的devDependencies&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后我们需要安装什么包就直接：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install xxx --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;gulp所以得配置都在gulpfile.js文件中，所以我们得新建一个文件：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gulpfile.js //放在项目目录中&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;gulp使用方法&quot;&gt;&lt;a href=&quot;#gulp使用方法&quot; class=&quot;headerlink&quot; title=&quot;gulp使用方法&quot;&gt;&lt;/a&gt;gulp使用方法&lt;/h3&gt;&lt;h4 id=&quot;gulp-压缩JS&quot;&gt;&lt;a href=&quot;#gulp-压缩JS&quot; class=&quot;headerlink&quot; title=&quot;gulp 压缩JS&quot;&gt;&lt;/a&gt;gulp 压缩JS&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;用gulp压缩Js做例子,其他配置都差不多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先把项目的根目录安排一下：所有的js放入一个文件夹，叫&lt;code&gt;js&lt;/code&gt;好了，所有的css放入一个文件夹，叫&lt;code&gt;css&lt;/code&gt;好了..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再创建一个文件夹叫&lt;code&gt;dist&lt;/code&gt;好了放在项目根目录，用于存放gulp处理后的各种文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后要安装相对应的包，比如说压缩JS的包叫做&lt;code&gt;gulp-uglify&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;$ npm install gulp-uglify --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  //可能是压缩过后js变丑了，多以叫uglify&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后在gulpfile.js中配置文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;获取这个包：&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;var uglify = require(&amp;quot;gulp-uglify&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建压缩任务：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gulp.task(&amp;quot;script&amp;quot;, function(){
    gulp.src(&amp;quot;js/*.js&amp;quot;)
        .pipe(uglify())
        .pipe(gulp.dest(&amp;quot;dist/js&amp;quot;));
})
//gulp.task(name, fun) - 创建一个任务，叫做name, 然后执行fun函数
//gulp.src(path) - 选择要用来处理的文件路径
//gulp.pipe - 相当于把一个文件放在管道里通向另一个文件，我这边的文件改变了，那边的也自动改变了。
//gulp.dest - 处理过后的文件路径，输出文件
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;监听文件配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gulp.task(&amp;quot;watchscript&amp;quot;, function(){
    gulp.watch(&amp;quot;js/*.js&amp;quot;, [&amp;quot;script&amp;quot;]);
})
//gulp.watch(path, func) - 监听文件修改，执行上面定义的“script”任务。有很多个任务的话，就放进数组里,如：[&amp;quot;task1&amp;quot;,&amp;quot;task2&amp;quot;]。
//在终端里输入gulp watchscript 就开始执行任务了。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置默认任务：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gulp.task(&amp;quot;default&amp;quot;, [&amp;quot;watchscript&amp;quot;]);
//终端里输入gulp，即开始执行&amp;quot;watchscript&amp;quot;任务。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;gulp-压缩css&quot;&gt;&lt;a href=&quot;#gulp-压缩css&quot; class=&quot;headerlink&quot; title=&quot;gulp 压缩css&quot;&gt;&lt;/a&gt;gulp 压缩css&lt;/h4&gt;&lt;p&gt;&lt;code&gt;$ npm install gulp-minify-css --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var minifycss = require(&amp;quot;gulp-minify-css&amp;quot;);

gulp.task(&amp;quot;minifycss&amp;quot;, function(){
    gulp.src(&amp;quot;css/*.css&amp;quot;)
        .pipe(nimifycss())
        .pipe(gulp.dest(&amp;quot;dist/css&amp;quot;))
)
gulp.task(&amp;quot;watchcss&amp;quot;, function(){
    gulp.watch(&amp;quot;css/*.css&amp;quot;, [&amp;quot;minifycss&amp;quot;])
)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;gulp-压缩图片&quot;&gt;&lt;a href=&quot;#gulp-压缩图片&quot; class=&quot;headerlink&quot; title=&quot;gulp 压缩图片&quot;&gt;&lt;/a&gt;gulp 压缩图片&lt;/h4&gt;&lt;p&gt;&lt;code&gt;$ npm install gulp-imagemin --save-dev&lt;/code&gt;    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gulp.task(&amp;quot;image&amp;quot;, function() {
    gulp.src(&amp;quot;images/*.*&amp;quot;)
        .pipe(imagemin())
        .pipe(gulp.dest(&amp;quot;dist/images&amp;quot;));
})
gulp.task(&amp;apos;watchimage&amp;apos;, function() {
    gulp.watch(&amp;quot;images/*.*&amp;quot;, [&amp;quot;image&amp;quot;]);
})
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;gulp-编译sass&quot;&gt;&lt;a href=&quot;#gulp-编译sass&quot; class=&quot;headerlink&quot; title=&quot;gulp 编译sass&quot;&gt;&lt;/a&gt;gulp 编译sass&lt;/h4&gt;&lt;p&gt;&lt;code&gt;$ npm install gulp-sass --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var sass = require(&amp;quot;gulp-sass&amp;quot;);

gulp.task(&amp;quot;sass&amp;quot;, function(){
    task.src(&amp;quot;scss/*.scss&amp;quot;)
        .pipe(sass()).on(&amp;quot;error&amp;quot;, function(err){
            console.error(&amp;quot;Error!&amp;quot;, err.message);
        })
        .pipe(gulp.dest(&amp;quot;dist/css&amp;quot;))
})
gulp.task(&amp;quot;watchsass&amp;quot;, function(){
    gulp.watch(&amp;quot;scss/*.scss&amp;quot;, [&amp;quot;sass&amp;quot;])
})
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;配置-gutil&quot;&gt;&lt;a href=&quot;#配置-gutil&quot; class=&quot;headerlink&quot; title=&quot;配置 gutil&quot;&gt;&lt;/a&gt;配置 gutil&lt;/h4&gt;&lt;p&gt;用来输出文字并可以有颜色。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install gulp-util --save-dev&lt;/code&gt;    &lt;/p&gt;
&lt;p&gt;大致用法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var gutil = require(&amp;quot;gulp-util&amp;quot;)

gulp.task(&amp;quot;default&amp;quot;,function(){
    gutil.log(&amp;apos;xxx&amp;apos;)//直接输出文字
    gutil.log(gutil.color.red(&amp;quot;error&amp;quot;))//输出带有颜色的文字
})
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;配置-watchpath&quot;&gt;&lt;a href=&quot;#配置-watchpath&quot; class=&quot;headerlink&quot; title=&quot;配置 watchpath&quot;&gt;&lt;/a&gt;配置 watchpath&lt;/h4&gt;&lt;p&gt;&lt;code&gt;gulp.watch&lt;/code&gt;用来监听文件的变化，但是有个问题，比方说当一个js文件夹里有多个js文件，那么修改一个js文件时，&lt;code&gt;gulp.watch&lt;/code&gt;将会编译所有的js文件，但是我只想它编译我当前修改的这个文件。&lt;/p&gt;
&lt;p&gt;所以说，要引进一个包，用来监听修改的文件:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install gulp-watch-path --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置gulp file.js:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var watchPath = require(&amp;quot;gulp-watch-path&amp;quot;)

gulp.task(&amp;quot;watchjs&amp;quot;,function(){
    gulp.watch(&amp;apos;js/**/*.js&amp;apos;, function (event) {
    var paths = watchPath(event, &amp;apos;js/&amp;apos;, &amp;apos;dist/&amp;apos;) //把路径赋值给paths, paths因此有一下属性：
    /*
    paths
        { srcPath: &amp;apos;js/xx.js&amp;apos;,
          srcDir: &amp;apos;js/&amp;apos;,
          distPath: &amp;apos;dist/js/xx.js&amp;apos;,
          distDir: &amp;apos;dist/js/&amp;apos;,
          srcFilename: &amp;apos;xx.js&amp;apos;,
          distFilename: &amp;apos;xx.js&amp;apos; }
    */
    gutil.log(gutil.colors.green(event.type) + &amp;apos; &amp;apos; + paths.srcPath)
    gutil.log(&amp;apos;Dist &amp;apos; + paths.distPath)   

    gulp.src(paths.srcPath) 
        .pipe(uglify())
        .pipe(gulp.dest(paths.distDir))
       })
})
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;配置-combiner&quot;&gt;&lt;a href=&quot;#配置-combiner&quot; class=&quot;headerlink&quot; title=&quot;配置 combiner&quot;&gt;&lt;/a&gt;配置 combiner&lt;/h4&gt;&lt;p&gt;当编辑js文件时，假如写错了，那么终端就会报错，并且退出gulp，这个时候我不想让终端退出，并显示错误，那么我要安装一个包:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install stream-combiner2 --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置gulp file.js:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var combiner = require(&amp;apos;stream-combiner2&amp;apos;)

var handleError = function (err) {
var colors = gutil.colors;
console.log(&amp;apos;\n&amp;apos;)
gutil.log(colors.red(&amp;apos;Error!&amp;apos;))
gutil.log(&amp;apos;fileName: &amp;apos; + colors.red(err.fileName))
gutil.log(&amp;apos;lineNumber: &amp;apos; + colors.red(err.lineNumber))
gutil.log(&amp;apos;message: &amp;apos; + err.message)
gutil.log(&amp;apos;plugin: &amp;apos; + colors.yellow(err.plugin))
}

gulp.task(&amp;apos;watchjs&amp;apos;, function () {
gulp.watch(&amp;apos;js/**/*.js&amp;apos;, function (event) {
    var paths = watchPath(event, &amp;apos;js/&amp;apos;, &amp;apos;dist/&amp;apos;)
    /*
    paths
        { srcPath: &amp;apos;js/xx.js&amp;apos;,
          srcDir: &amp;apos;js/&amp;apos;,
          distPath: &amp;apos;dist/js/log.js&amp;apos;,
          distDir: &amp;apos;dist/js/&amp;apos;,
          srcFilename: &amp;apos;xx.js&amp;apos;,
          distFilename: &amp;apos;xx.js&amp;apos; }
    */
    gutil.log(gutil.colors.green(event.type) + &amp;apos; &amp;apos; + paths.srcPath)
    gutil.log(&amp;apos;Dist &amp;apos; + paths.distPath)

    var combined = combiner.obj([
        gulp.src(paths.srcPath),
        uglify(),
        gulp.dest(paths.distDir)
    ])

    combined.on(&amp;apos;error&amp;apos;, handleError)
       })
})
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;gulp-安装的包&quot;&gt;&lt;a href=&quot;#gulp-安装的包&quot; class=&quot;headerlink&quot; title=&quot;gulp 安装的包&quot;&gt;&lt;/a&gt;gulp 安装的包&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;quot;devDependencies&amp;quot;: {
&amp;quot;gulp&amp;quot;: &amp;quot;^3.9.1&amp;quot;,
&amp;quot;gulp-autoprefixer&amp;quot;: &amp;quot;^3.1.0&amp;quot;,
&amp;quot;gulp-imagemin&amp;quot;: &amp;quot;^3.0.1&amp;quot;,
&amp;quot;gulp-minify-css&amp;quot;: &amp;quot;^1.2.4&amp;quot;,
&amp;quot;gulp-sass&amp;quot;: &amp;quot;^2.3.2&amp;quot;,
&amp;quot;gulp-sourcemaps&amp;quot;: &amp;quot;^1.6.0&amp;quot;,
&amp;quot;gulp-uglify&amp;quot;: &amp;quot;^1.5.4&amp;quot;,
&amp;quot;gulp-util&amp;quot;: &amp;quot;^3.0.7&amp;quot;,
&amp;quot;gulp-watch-path&amp;quot;: &amp;quot;^0.1.0&amp;quot;,
&amp;quot;stream-combiner2&amp;quot;: &amp;quot;^1.1.1&amp;quot;
 }
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;gulp是基于Node实现Web前端自动化开发的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得gulp就是用来自动压缩js/css/images，自动编译sass/less, 自动加前缀。这些功能能让文件更小，提高网页加载速度，同时都是g
    
    </summary>
    
    
      <category term="gulp" scheme="http://zachary05.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Bower 使用方法总结</title>
    <link href="http://zachary05.github.io/2016/07/19/Bower%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://zachary05.github.io/2016/07/19/Bower使用方法总结/</id>
    <published>2016-07-19T01:57:59.000Z</published>
    <updated>2016-07-19T02:16:18.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;Bower&quot;&gt;&lt;a href=&quot;#Bower&quot; class=&quot;headerlink&quot; title=&quot;Bower&quot;&gt;&lt;/a&gt;Bower&lt;/h4&gt;&lt;p&gt;我一直以为Bower翻译过来应该是&lt;code&gt;鞠躬的人&lt;/code&gt;，&lt;code&gt;bow&lt;/code&gt;不是鞠躬吗，加上&lt;code&gt;er&lt;/code&gt;成了&lt;code&gt;鞠躬的人&lt;/code&gt;，后来我查了一下，&lt;code&gt;bower&lt;/code&gt;意思是&lt;code&gt;树荫&lt;/code&gt;或者&lt;code&gt;闺房&lt;/code&gt;，这…&lt;/p&gt;
&lt;p&gt;😐&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通常情况下，写一个网页需要用到诸多库，如jQuery,modernizr…但是库多了，就不太好管理了，所以这个时候Bower就华丽丽地出现了，用于下载，更新，查询各种库，所以是个挺好用的&lt;code&gt;库管理工具&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么就开始用吧！首先安装Bower，但是Bower是基于Node.js的，所以要先安装Node.js，然后在进行安装。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudu npm install bower -g //全局安装Bower&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudu npm update bower -g //更新&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudu npm uninstall bower -g //卸载&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以查看&lt;strong&gt;帮助&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ bower help //查看帮助:&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Usage:

bower &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] [&amp;lt;options&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cache                   Manage bower cache
help                    Display help information about Bower
home                    Opens a package homepage into your favorite browser
info                    Info of a particular package
init                    Interactively create a bower.json file
install                 Install a package locally
link                    Symlink a package folder
list                    List local packages - and possible updates
login                   Authenticate with GitHub and store credentials
lookup                  Look up a package URL by name
prune                   Removes local extraneous packages
register                Register a package
search                  Search for a package by name
update                  Update a local package
uninstall               Remove a local package
unregister              Remove a package from the registry
version                 Bump a package version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-f, --force             Makes various commands more forceful
-j, --json              Output consumable JSON
-l, --loglevel          What level of logs to report
-o, --offline           Do not hit the network
-q, --quiet             Only output important information
-s, --silent            Do not output anything, besides errors
-V, --verbose           Makes output more verbose
--allow-root            Allows running commands as root
-v, --version           Output Bower version
--no-color              Disable colors
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;开始使用&quot;&gt;&lt;a href=&quot;#开始使用&quot; class=&quot;headerlink&quot; title=&quot;开始使用&quot;&gt;&lt;/a&gt;开始使用&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;初始化&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;$ bower init //初始化项目目录&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;：例如安装jquery&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;$ bower install jquery //安装jquery库&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;卸载&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;$ bower uninstall jquery //卸载jquery库&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;$ bower update jquery //更新jquery库&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;搜索&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;$ bower search jquery //搜索jquery&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看信息&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;$ bower info jquery //查看信息&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;显示&lt;/strong&gt;安装的库：&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;$ bower ls //也可以用list, 不过ls简单些&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Bower&quot;&gt;&lt;a href=&quot;#Bower&quot; class=&quot;headerlink&quot; title=&quot;Bower&quot;&gt;&lt;/a&gt;Bower&lt;/h4&gt;&lt;p&gt;我一直以为Bower翻译过来应该是&lt;code&gt;鞠躬的人&lt;/code&gt;，&lt;code&gt;bow&lt;/code&gt;不是鞠躬吗，加
    
    </summary>
    
    
      <category term="Bower" scheme="http://zachary05.github.io/tags/Bower/"/>
    
  </entry>
  
  <entry>
    <title>Ajax学习笔记</title>
    <link href="http://zachary05.github.io/2016/07/18/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://zachary05.github.io/2016/07/18/Ajax学习笔记/</id>
    <published>2016-07-18T14:40:29.000Z</published>
    <updated>2016-07-18T15:06:48.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;AJAX是一种无须重新加载整个网页的情况下，能够更新部分网页的技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;听起来挺酷，因为我知道，网页只有刷新才会呈现新的内容，但是Ajax的好处就是不用去刷新网页，就可以更新网站的局部内容。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;XMLHttpRequest对象（XMLHttpRequest是Ajax的基础）&quot;&gt;&lt;a href=&quot;#XMLHttpRequest对象（XMLHttpRequest是Ajax的基础）&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest对象（XMLHttpRequest是Ajax的基础）&quot;&gt;&lt;/a&gt;XMLHttpRequest对象（XMLHttpRequest是Ajax的基础）&lt;/h4&gt;&lt;p&gt;所有现代浏览器都支持&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象（IE5 IE6 使用ActiveXObject)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;的作用：用于后台 [浏览器中的脚本(客户端)] 与服务器交换数据。这个对象充当着浏览器中中间人的角色。以往的请求都是由浏览器发出，而Javascript通过这个对象可以自己发送请求，同时也自己处理响应。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;创建XMlHttpRequest对象&quot;&gt;&lt;a href=&quot;#创建XMlHttpRequest对象&quot; class=&quot;headerlink&quot; title=&quot;创建XMlHttpRequest对象&quot;&gt;&lt;/a&gt;创建XMlHttpRequest对象&lt;/h4&gt;&lt;p&gt;所有现代浏览器均内置&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var request = new XMLHttpRequest();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但，IE，你懂得，所以咱们得这样获取：（&lt;code&gt;ActiveXObject&lt;/code&gt;是针对IE的）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(window.XMLHttpRequest){
    var request = new XMLHttpRequest();
}else{
    var request = new ActiveXOject(&amp;apos;Microsoft.XMLHTTP);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者可以写一个函数当做脚本好了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getHTTPObject() {
  if (typeof XMLHttpRequest == &amp;quot;undefined&amp;quot;) {
        XMLHttpRequest = function () {
          try {return new ActiveXObject(&amp;quot;Msxml2.XMLHTTP.6.0&amp;quot;);}
          catch (e) { }
          try { return new ActiveXObject(&amp;quot;Msxml2.XMLHTTP.3.0&amp;quot;); }
          catch (e) { }
          try { return new ActiveXObject(&amp;quot;Msxml2.XMLHTTP&amp;quot;); }
          catch (e) { }
        }
      }
  return new XMLHttpRequest();
}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;Ajax-向服务器发送请求&quot;&gt;&lt;a href=&quot;#Ajax-向服务器发送请求&quot; class=&quot;headerlink&quot; title=&quot;Ajax 向服务器发送请求&quot;&gt;&lt;/a&gt;Ajax 向服务器发送请求&lt;/h4&gt;&lt;p&gt;主要使用&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象的&lt;strong&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;code&gt;sent()&lt;/code&gt;&lt;/strong&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;request.open(method, url, async);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;method&lt;/code&gt;&lt;/strong&gt;：请求的类型：GET/POST&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;url&lt;/code&gt;&lt;/strong&gt;：文件在服务器上的位置，该文件可以是任何类型，.txt/.xml/.asp/.php&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;async&lt;/code&gt;&lt;/strong&gt;：true（异步）或者false（同步）。XMLHttpRequest对象如果要使用AJAX，open()方法的async参数必须设为true.    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//当请求为异步时，onreadystatechange事件中的就绪状态执行的函数

request.onreadystatechange = function(){
if(request.readyState == 4 &amp;amp;&amp;amp; request.status == 200){
        doing something...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;request.send(string);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解释：&lt;br&gt;将请求发送到服务器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;string&lt;/code&gt;：仅用于POST请求。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Ajax-onreadystatechange事件&quot;&gt;&lt;a href=&quot;#Ajax-onreadystatechange事件&quot; class=&quot;headerlink&quot; title=&quot;Ajax - onreadystatechange事件&quot;&gt;&lt;/a&gt;Ajax - onreadystatechange事件&lt;/h4&gt;&lt;p&gt;请求发送到服务器之后，那么就会有基于响应的任务。并且有两个属性让我们知道请求怎么样了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;readyState&lt;/code&gt;和 &lt;code&gt;status&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每次&lt;code&gt;readyState&lt;/code&gt;改变时，都会调用&lt;code&gt;onreadystatechange&lt;/code&gt;事件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;readyState属性&lt;/code&gt;有5个值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0：请求未初始化&lt;/li&gt;
&lt;li&gt;1：服务器已经建立连接&lt;/li&gt;
&lt;li&gt;2：请求已接收&lt;/li&gt;
&lt;li&gt;3：请求已处理&lt;/li&gt;
&lt;li&gt;4：请求已完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;status属性&lt;/code&gt;的值有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200：’OK’表明成功&lt;/li&gt;
&lt;li&gt;301：Moved Permanently, 永久移动&lt;/li&gt;
&lt;li&gt;302：Move temporarily, 暂时移动&lt;/li&gt;
&lt;li&gt;304：Not Modified, 未修改&lt;/li&gt;
&lt;li&gt;307：Temporary Redirect, 暂时重定向&lt;/li&gt;
&lt;li&gt;401：Unauthorised, 未授权&lt;/li&gt;
&lt;li&gt;403：Forbidden, 禁止访问&lt;/li&gt;
&lt;li&gt;404：Not Found, 未找到页面&lt;/li&gt;
&lt;li&gt;500：Internal Server Error, 服务器发生错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上之后&lt;code&gt;2XX&lt;/code&gt;,和&lt;code&gt;304&lt;/code&gt;的状态码表示服务器返回正常。&lt;/p&gt;
&lt;p&gt;所以一般看&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;request.readyState == 4 &amp;amp;&amp;amp; request.status == 200 才表明请求成功了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;statusText属性&lt;/code&gt;是只读值，返回一个字符串，表明服务器发送的状态提示，如“200 OK”.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Ajax响应&quot;&gt;&lt;a href=&quot;#Ajax响应&quot; class=&quot;headerlink&quot; title=&quot;Ajax响应&quot;&gt;&lt;/a&gt;Ajax响应&lt;/h4&gt;&lt;p&gt;竟然你请求了数据，那么服务器就会有响应回来的数据。&lt;/p&gt;
&lt;p&gt;获取服务器的响应，要使用&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象的&lt;code&gt;responseText&lt;/code&gt;属性或者&lt;code&gt;responseXM&lt;/code&gt;L属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;responseText : 获取字符串形式的响应数据&lt;/p&gt;
&lt;p&gt;responseXML : 获取XML形式的响应数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;响应成功后，我们就可以用服务器返回来的&lt;code&gt;responseText/responseXML&lt;/code&gt;数据进行处理，显示给用户看。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;AJAX是一种无须重新加载整个网页的情况下，能够更新部分网页的技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;听起来挺酷，因为我知道，网页只有刷新才会呈现新的内容，但是Ajax的好处就是不用去刷新网页，就可以更新网站的局部内容。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Ajax" scheme="http://zachary05.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Git 基本用法</title>
    <link href="http://zachary05.github.io/2016/06/28/git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://zachary05.github.io/2016/06/28/git基本用法/</id>
    <published>2016-06-28T13:32:04.000Z</published>
    <updated>2016-06-28T13:41:33.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$ mkdir fileA //创建仓库(make dir) 

$ cd fileA //进入当前文件夹

$ pwd //查看当前文件路径
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;$ git init //初始化git仓库
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;在文件夹里创建文件后(如README.md)：&lt;/p&gt;
&lt;p&gt;执行下面命令会没有反应，没有消息是好消息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add README.md //添加文件

$ git add file1.md file2.md file3.md //git add可以一次提交多个文件
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;-m后是本次提交的说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit -m &amp;apos;write a readme.ad&amp;apos; //提交到仓库
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;$ git status //查看当前状态

$ git diff //查看修改内容

$ git log //查看提交的历史记录,q退出

$ git log --pretty=oneline //可以简单化历史记录
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;版本回退&quot;&gt;&lt;a href=&quot;#版本回退&quot; class=&quot;headerlink&quot; title=&quot;版本回退&quot;&gt;&lt;/a&gt;版本回退&lt;/h4&gt;&lt;p&gt;HEAD是当前版本，HEAD^是上个版本，HEAD~100上一白个版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reset --hard HEAD^     

$ git reset --hard 0e4f7bb // 退回到版本号

$ git reflog // 可以查看所有历史记录和版本号

$ cat README.md //可以查看文件内容
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;撤销修改&quot;&gt;&lt;a href=&quot;#撤销修改&quot; class=&quot;headerlink&quot; title=&quot;撤销修改&quot;&gt;&lt;/a&gt;撤销修改&lt;/h4&gt;&lt;p&gt;可以配合git reset –hard HEAD file 一起使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -- README.md //撤销到最近一次add或commit时的状态

$ rm README.md //版本库里删除文件

$ git checkout -- README.md // 一键还原删除文件，因为版本库里还有。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;远程仓库&quot;&gt;&lt;a href=&quot;#远程仓库&quot; class=&quot;headerlink&quot; title=&quot;远程仓库&quot;&gt;&lt;/a&gt;远程仓库&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1) 创建SSH key. 查看主目录.ssh是否有id_rsa,id_rsa.pub.

2) If没有，创建SSH key:

    $ ssh-keygen -t rsa -C &amp;apos;youremail@example.com&amp;apos;

3) id_rsa是私钥不要泄露，id_rsa_pub是公钥可以暴露

4) 登陆Github,进入settings,找到SSH keys,添加新SSH key,填上id_rsa_pub.

5) Github需要知道是咱们自己提交的而不是别人所以需要SSH key.
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;从远程仓库克隆:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1）登陆Github, 创建新仓库 For example: ohMyLove

2）$ git clone git@github.com:xxx/ohMyLove.git

3）Git原生的git协议比https协议更快
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;创建分支：
$ git checkout -b dev //创建并切换到dev分支

&amp;gt;等同于：
$ git branch dev //创建分支dev

$ git checkout dev //切换分支dev

查看分支：
$ git branch //查看分支

dev分支工作完成后：（切换主分支，进行合并）
$ git checkout master //切换到主分支

$ git merge dev // 把dev上工作内容合并到master上

合并完成后删除分支dev分支：
$ git branch -d dev // 删除dev分支

$ git branch //可以查看分支情况
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;合并分支一般是Fast forward模式，删除分支后，会丢掉分支信息。&lt;/p&gt;
&lt;p&gt;合并是加上 –no-ff参数可以变为普通合并模式。可以查看历史记录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git merge --no-ff -m &amp;apos;merge with --no-ff&amp;apos; dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为此次合并Git会生成一个新的commit，所以加上-m.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果要加入一个新的特征(feature)，最好新建一个分支，然后进行合并，再删除&lt;/p&gt;
&lt;h4 id=&quot;Bug分支&quot;&gt;&lt;a href=&quot;#Bug分支&quot; class=&quot;headerlink&quot; title=&quot;Bug分支&quot;&gt;&lt;/a&gt;Bug分支&lt;/h4&gt;&lt;p&gt;当接到BUG时，若要在master上创建issue-01分支进行修复，可是当前分支dev工作没有完成。&lt;/p&gt;
&lt;p&gt;使用git stash将当前工作现场dev储藏起来。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git stash // 储藏
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后切换到master支上创建并切换到issue-01分支上：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout master

$ git checkout -b issue-01
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;issue-01修改结束后，切换到master进行合并，并删除issue-01:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout master

$ git merge --no-ff -m &amp;apos;fix issue-01&amp;apos; issus-01 

$ git branch -d issue-01 //删除issue-01分支
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在完成的修复Bug任务，可以回到dev上工作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout dev

$ git stash list //查看储藏的内容

$ git pop // 恢复之前的工作
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;多人合作&quot;&gt;&lt;a href=&quot;#多人合作&quot; class=&quot;headerlink&quot; title=&quot;多人合作&quot;&gt;&lt;/a&gt;多人合作&lt;/h4&gt;&lt;p&gt;当从远端仓库克隆时，实际上是将本地master分支和远端master分支对应起来。远端仓库的默认名称是origin,可以查看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote // origin

$ git remote -v // 查看详细信息

origin    git@github.com:zachary05/gitskills.git (fetch)

origin    git@github.com:zachary05/gitskills.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面显示了可以推送和抓取的origin的地址，如果没有推送权限则没有push的地址。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;推送分支&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;推送时要指定本地分支，这样本地分支可以推送到远端仓库对应的分支。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;抓取分支&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多人合作时，大家会各自推送到master和dev分支上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当从别人远端仓库克隆仓库时。一般只会有master分支。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但是如果要在dev分支上工作，必须创建远程origin的dev到本地。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -b dev origin/dev

$ git push origin dev //推送dev分支到远端
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本地dev与远程dev建立联系：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$  git branch --set-upstream dev origin/dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果和别人对同一文件的修改存在冲突，则先抓取下来进行修改，再提交。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git pull //抓取分支
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;标签管理&quot;&gt;&lt;a href=&quot;#标签管理&quot; class=&quot;headerlink&quot; title=&quot;标签管理&quot;&gt;&lt;/a&gt;标签管理&lt;/h4&gt;&lt;p&gt;创建标签:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git tag &amp;lt;name&amp;gt;//eg: $ git tag v.01

$ git tag &amp;lt;name&amp;gt; &amp;lt;commit:id&amp;gt; //在对应commit上打标签。

$ git tag -a v.01 -m &amp;apos;version v.01 released&amp;apos; 8678979 //创建带有说明的标签。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看标签:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git tag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看标签信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git show &amp;lt;tagname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git tag -d v.01 //删除v.01标签
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;推送标签到远程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push origin v.01 

$ git push --tags //一次性推送未推送的标签。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果要删除远程标签： (先删除本地标签，在删除远程标签)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git tag -d v.01 //本地删除 v.01

$ git push origin :refs/tags/v.01 // 远程删除 v.01
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;配置Git&quot;&gt;&lt;a href=&quot;#配置Git&quot; class=&quot;headerlink&quot; title=&quot;配置Git&quot;&gt;&lt;/a&gt;配置Git&lt;/h4&gt;&lt;p&gt;显示颜色：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global color.ui true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;快捷方式的配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global alias.st status // git st 显示状态

$ git config --global alias.ck checkout // git ck 切换分支

$ git config --global alias.co commit // git co 提交

$ git config --global alias.br branch // git br 分支

$ git config --global alias.unstage &amp;apos;reset HEAD&amp;apos; // git unstage 撤销暂存区的修改

$ git config --global alias.last &amp;apos;log -1&amp;apos; // 显示最后一次提交

$ git config --global alias.lg &amp;quot;log --color --graph --pretty=format:&amp;apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;apos; --abbrev-commit&amp;quot; // git lg显示（我承认这个很无敌）记录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置文件&lt;/p&gt;
&lt;p&gt;配置git时，加上–global是对全局起作用，如果不加，只对当前文件夹起作用。&lt;/p&gt;
&lt;p&gt;每个仓库的git配置都放在了.git/config里面&lt;/p&gt;
&lt;p&gt;如果要删除直接把[alias]对应的删掉。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;全局配置的git文件在用户主目录的.gitconfig文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;忽略特殊文件：（如一些数据库密码）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必须把这些文件放在工作目录中，但是不能提交他们，但每次git st时都会显示Untracked file…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个时候在文件夹中创建’.gitignore’，把这些要忽略的文件名填写进去就OK了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Github为我们准备了各种配置文件：&lt;a href=&quot;https://github.com/github/gitignore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/github/gitignore&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Useful-Git-Related-Websites：&quot;&gt;&lt;a href=&quot;#Useful-Git-Related-Websites：&quot; class=&quot;headerlink&quot; title=&quot;Useful Git-Related Websites：&quot;&gt;&lt;/a&gt;Useful Git-Related Websites：&lt;/h4&gt;&lt;p&gt;1.&lt;a href=&quot;http://git-scm.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://pan.baidu.com/s/1jGxjQL4#path=%252Fpub%252Fgit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git Cheat Sheet&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$ mkdir fileA //创建仓库(make dir) 

$ cd fileA //进入当前文件夹

    
    </summary>
    
    
      <category term="git" scheme="http://zachary05.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://zachary05.github.io/2016/06/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://zachary05.github.io/2016/06/26/正则表达式/</id>
    <published>2016-06-26T03:59:41.000Z</published>
    <updated>2016-07-03T23:20:38.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;正则表达式-RegExp&quot;&gt;&lt;a href=&quot;#正则表达式-RegExp&quot; class=&quot;headerlink&quot; title=&quot;正则表达式(RegExp)&quot;&gt;&lt;/a&gt;正则表达式(RegExp)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;除换行符和其他Unicode行终止符之外的任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;重复使用任意次数(&amp;gt;= 0) &lt;code&gt;*?&lt;/code&gt; 重复任意次数但尽可能少&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;重复一次或者多次(&amp;gt;= 1) &lt;code&gt;+?&lt;/code&gt; 重复一次或更多次但尽可能少&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;重复零次或者一次(0 | 1)  &lt;code&gt;??&lt;/code&gt; 重复零次或者一次但尽可能少&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n}&lt;/code&gt;重复n次 &lt;code&gt;{n}?&lt;/code&gt; 重复n次但尽可能少&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,}&lt;/code&gt;重复n次或者更多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,m}&lt;/code&gt;重复n到m次 &lt;code&gt;{n,m}?&lt;/code&gt; 重复n到m次但尽可能少&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[\b]&lt;/code&gt;匹配一个退格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b&lt;/code&gt;&lt;strong&gt;单词&lt;/strong&gt;开头或者结尾，&lt;strong&gt;单词&lt;/strong&gt;的分界线 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt;匹配一位数字；如座机号: &lt;code&gt;/0\d{2}-\d{8}/&lt;/code&gt;; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;\s&lt;/code&gt;匹配任意的空格 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w&lt;/code&gt;匹配字母或数字或下划线或汉字 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;\B&lt;/code&gt;匹配不是单词开头或者结束的位置 &lt;code&gt;如：/\B../&lt;/code&gt;会匹配“boost”中的”oo”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt;匹配任意不是数字的字符 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;\S&lt;/code&gt;匹配任意不是空白符的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\W&lt;/code&gt;匹配任意不是字母，数字，下划线，汉字的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;匹配&lt;strong&gt;字符串&lt;/strong&gt;的开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;匹配&lt;strong&gt;字符串&lt;/strong&gt;的结束&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[aeiou]&lt;/code&gt;匹配任何一个[]内的字符；如:&lt;code&gt;[.?!]&lt;/code&gt;匹配标点(.或?或!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]&lt;/code&gt;与&lt;code&gt;\b&lt;/code&gt;一样，匹配一位数字(范围)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z0-9A-Z_]&lt;/code&gt;与&lt;code&gt;\w&lt;/code&gt;一样&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^x]&lt;/code&gt;匹配除了x意外的任意字符 &lt;code&gt;如：[^aeiou]&lt;/code&gt;匹配除了aeiou之外的任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x|y&lt;/code&gt;匹配x或者y&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(exp)&lt;/code&gt;匹配exp，捕获的文本到自动命名的组里 &lt;code&gt;如匹配一个IP:/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}\1/&lt;/code&gt;； \1第一组,他的位置是参与计数的左括号的位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(?:exp)&lt;/code&gt;匹配exp，不捕获匹配的文本，也不给此分组匹配组号（剥夺一个分组对组号的分配）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(?&amp;lt;name&amp;gt;exp)&lt;/code&gt;匹配exp，捕获文本到名称为name的组里，也可以写成&lt;code&gt;(?&amp;#39;name&amp;#39;exp)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(?=exp)&lt;/code&gt;匹配exp之前的位置 &lt;code&gt;如：/\b\w+(?=ing)\b/&lt;/code&gt;匹配ing结尾的词，像dancing里的ing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(?&amp;lt;=exp)&lt;/code&gt;匹配exp之后的位置 &lt;code&gt;如：/\b(?&amp;lt;=\bre)\b/&lt;/code&gt;匹配re之后的部分，想reading里的ading&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(?#comment)&lt;/code&gt;包含注释 &lt;code&gt;如对上面的IP表达式做注释：2[0-4])\d(?#200-249)|25[0-5](?#250-255|[01]?\d\d?(?#0-199)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;贪婪匹配 例 aabab中 &lt;code&gt;a.*b&lt;/code&gt; =&amp;gt; &lt;code&gt;aabab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;懒惰匹配 例 aabab中 &lt;code&gt;a.*?&lt;/code&gt; =&amp;gt; &lt;code&gt;aab&lt;/code&gt;或者&lt;code&gt;ab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt;换行符 匹配包括&lt;code&gt;\n&lt;/code&gt;之内的任意字符&lt;code&gt;[\s\S]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\r&lt;/code&gt;回车&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\f&lt;/code&gt;换页符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt;水平制表符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\v&lt;/code&gt;垂直制表符&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Further Information:&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt; &lt;a href=&quot;http://www.jianshu.com/p/e7bb97218946&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20个正则表达式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式-RegExp&quot;&gt;&lt;a href=&quot;#正则表达式-RegExp&quot; class=&quot;headerlink&quot; title=&quot;正则表达式(RegExp)&quot;&gt;&lt;/a&gt;正则表达式(RegExp)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;除换行符和其他U
    
    </summary>
    
    
      <category term="正则表达式" scheme="http://zachary05.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求/TCP协议/三次握手/四次挥手</title>
    <link href="http://zachary05.github.io/2016/06/19/HTTP%E8%AF%B7%E6%B1%82-TCP%E5%8D%8F%E8%AE%AE-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://zachary05.github.io/2016/06/19/HTTP请求-TCP协议-三次握手-四次挥手/</id>
    <published>2016-06-19T01:08:56.000Z</published>
    <updated>2016-07-19T02:19:57.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;HTTP请求&quot;&gt;&lt;a href=&quot;#HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求&quot;&gt;&lt;/a&gt;HTTP请求&lt;/h4&gt;&lt;p&gt;HTTP请求一般过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;http客户端发起请求，创建端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http服务器在端口监听客户端请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http服务器向客户端返回状态和内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;从输入网站到渲染页面都做了什么🤔：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.首先浏览器查看自身DNS缓存（查看chrome浏览器NDS缓存：chrome://net-internals/#dns）；&lt;/p&gt;
&lt;p&gt;2.搜索操作系统自身的DNS缓存（如果浏览器没有找到缓存或缓存失效😮&lt;/p&gt;
&lt;p&gt;3.读取本地的HOST文件（如果没有找到系统缓存😨&lt;/p&gt;
&lt;p&gt;4.浏览器发起一个NDS调用（如果本地HOST也没有😰&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;宽带运营商服务器查看本身缓存，若没有则：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运营商服务器发起一个迭代NDS解析的请求&amp;gt;&amp;gt;&amp;gt;运营商服务器把结果返回操作系统内核同时缓存起来&amp;gt;&amp;gt;&amp;gt;操作系统内核把结果返回浏览器&amp;gt;&amp;gt;&amp;gt;最终浏览器拿到了域名的对应IP地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.浏览器获取域名对应的IP地址后，发起HTTP“三次握手”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器随机端口对服务器TCP请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;TCP请求通过层层的路由，经过网卡，然后经过TCP/IP协议栈/防火墙过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6.TCP/IP连接建立起来后，浏览器就可以像服务器发送HTTP请求。&lt;/p&gt;
&lt;p&gt;7.服务器端接收到了这个请求，根据路径参数，经过后端的一些处理之后，把处理后的一个结果的数据返回给浏览器。这个时候把页面完整的HTML代码返回给浏览器。&lt;/p&gt;
&lt;p&gt;8.浏览器拿到了网站完整的HTML页面代码，在解析和渲染这个页面时，里面的JS，CSS，图片等都是HTTP请求，要经过上面主要的七步。&lt;/p&gt;
&lt;p&gt;9.浏览器根据拿到的资源对页面进行渲染。&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&quot;HTTP请求主要方法&quot;&gt;&lt;a href=&quot;#HTTP请求主要方法&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求主要方法&quot;&gt;&lt;/a&gt;HTTP请求主要方法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;GET(获取，读取)&lt;/li&gt;
&lt;li&gt;POST(上传，提交)&lt;/li&gt;
&lt;li&gt;PUT(更新)&lt;/li&gt;
&lt;li&gt;DELETE(删除)&lt;/li&gt;
&lt;li&gt;HEAD(向服务器发送指定资源的请求)&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;状态码&quot;&gt;&lt;a href=&quot;#状态码&quot; class=&quot;headerlink&quot; title=&quot;状态码&quot;&gt;&lt;/a&gt;状态码&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;1.. //信息，表示请求已经接收&lt;/li&gt;
&lt;li&gt;2.. //成功&lt;/li&gt;
&lt;li&gt;3.. //重定向&lt;/li&gt;
&lt;li&gt;4.. //客户端错误&lt;/li&gt;
&lt;li&gt;5.. //服务端错误&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;More Information: &lt;a href=&quot;https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#1xx.E6.B6.88.E6.81.AF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h4&gt;&lt;p&gt;(Transmission Control Protocol,传输控制协议)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TCP是一种面向连接的，可靠的，基于字节流的通讯协议，数据在传输前简历连接，传输完毕后断开连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TCP的作用是流量控制，主要是控制数据流的传输。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端在收发数据要使用connect()函数与服务器建立连接，其目的是保证IP地址、端口、物理链路等正确，为数据的传输开辟通道。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TCP请求连接时要传输三个数据包，称&lt;code&gt;三次握手(Three-way Handshaking)&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;  1.‘嗨，哥们，咱两唠唠呗。’&lt;/p&gt;
&lt;p&gt;  2.’好，咱们可以唠唠。’&lt;/p&gt;
&lt;p&gt;  3.’那行，咱们开始唠了。’&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;TCP数据结构&quot;&gt;&lt;a href=&quot;#TCP数据结构&quot; class=&quot;headerlink&quot; title=&quot;TCP数据结构&quot;&gt;&lt;/a&gt;TCP数据结构&lt;/h4&gt;&lt;p&gt;首先，来看一看TCP数据结构（如图）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/TCP%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg&quot; alt=&quot;TCP数据结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;来解释下，主要就是看灰色阴影部分啦：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序号Seq(Sequence Number):用来表示从计算机A到B的数据包序号，计算机发送数据时对此进行标记。&lt;/li&gt;
&lt;li&gt;确认号Ack(Acknowledge Number):客户端和服务端都可以发送，Ack = Seq + 1.&lt;/li&gt;
&lt;li&gt;标志位：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;URG(urgent pointer)&lt;/code&gt;:紧急指针有效:[标志紧急位置]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACK(acknowledge)&lt;/code&gt;:确认序号有效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PSH(push)&lt;/code&gt;:推标志：[接受端不将该数据进行队列处理，主要用于elnet 或 rlogin 等交互模式的连接时]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RST(reset)&lt;/code&gt;:复位标志: [用于复位相应的TCP连接]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SYN(synchronous)&lt;/code&gt;:建立一个新连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIN(finish)&lt;/code&gt;:断开一个连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;三次握手&quot;&gt;&lt;a href=&quot;#三次握手&quot; class=&quot;headerlink&quot; title=&quot;三次握手&quot;&gt;&lt;/a&gt;三次握手&lt;/h4&gt;&lt;p&gt;接下来就是三次握手了（如图）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg&quot; alt=&quot;三次握手&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看了之后是不是我表示很懵逼，我个人粗浅的理解是：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.客户端调用`socket()`函数后，没有开始建立连接，处于CLOSED状态；而服务器调用`listen()`函数后，进入LISTEN状态并开始监听客户端的请求。

2.客户端调用`connect()`函数后，发送SYN包到服务器，生成随机数字Seq:1000，传给服务器，然后自身进入SYN_SEND状态。

3.服务器接收到了请求后，确认SYN包并自己生成SYN包，即SYN+ACK,将生成随机数Seq:2000,同时将客户端传来的1000+1=1001作为Ack返回给客户端，进入SYN-RECV状态

4.客户端接收到数据包后查看Ack是否是1001，是的就连接成功。然后，客户端将服务器传来的2000+1作为Ack传回服务器，进入ESTABLISHED状态。

5.服务器接收到数据包，查看Ack是否是2001,是的就成功，进入ESTABLISHED状态。

6.客户端与服务器都进入ESTALISHED状态，连接建立成功，很开心可以收发数据了。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;是不是还是很懵逼，我换个通俗的例子：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.身为特务的你在日本执行机密行动，而你的老板在中国，这个时候你要发消息给你老板。

2.你联系到了老板，但是你们互相不确定是否是对方，毕竟相隔万里，但是你们有一个类似‘暗号’的方式：

    1.首先，你得发个随机数字给你老板。

    2.老板得回你这个数字+1，同时老板发个数字给你。

    3.这时，你收到老板的回馈，并把老板发来的数字+1，发给老板。

3.这样，通过这种方式，你们彼此就确定了是对方，很开心就可以进行密谈了。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h4 id=&quot;四次挥手&quot;&gt;&lt;a href=&quot;#四次挥手&quot; class=&quot;headerlink&quot; title=&quot;四次挥手&quot;&gt;&lt;/a&gt;四次挥手&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png&quot; alt=&quot;四次挥手&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;断开连接可以是Client端，也可以是Server端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;假设Client端发起中断请求，就先发送FIN报文&amp;gt;&amp;gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;Server端接收到FIN报文，发送Ack给Client端，告诉它已经知道了终止请求。但如果数据没有发送完成，则不必关闭Socket，可以继续发送数据&amp;gt;&amp;gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;这个时候Client端进入FIN_WAIT状态，等待Server端继续发送数据&amp;gt;&amp;gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;当Server端数据发送完毕，则向Client端发送FIN报文，告诉它数据发送完毕，可以关闭连接&amp;gt;&amp;gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;Client端收到FIN，便知道可以断开连接了，但它不相信网络所以发送Ack进入TIME_WAIT状态，等待&lt;a href=&quot;http://blog.csdn.net/xiaofei0859/article/details/6044694&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2MSL&lt;/a&gt;后没有收到回复的话，则证明Server端已经正常关闭&amp;gt;&amp;gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;最后，Client端也关闭连接，TCP连接就已经完全关闭了。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我个人的理解是：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.打比方你要和女朋友分手，你给女朋友发短信说“咱们分手吧” &amp;gt;&amp;gt;&amp;gt;
2.女朋友收到信息之后，发给你信息说“我知道了，不过我要想想” &amp;gt;&amp;gt;&amp;gt;
3.这个时候，你就等着，直到女朋友给你信息说“好的，我们分手吧” &amp;gt;&amp;gt;&amp;gt;
4.你收到了信息之后，你就发个信息确认一下“我们已经分手了是吧” &amp;gt;&amp;gt;&amp;gt;
5.这个时候，你就等着，等啊等啊，没等到回复，你就知道你们已经分手了 &amp;gt;&amp;gt;&amp;gt;
6.分手结束。
7.[真是个悲伤的故事]
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;完整的请求连接图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xthft.com1.z0.glb.clouddn.com/%E5%AE%8C%E6%95%B4%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E8%BF%9E%E6%8E%A5.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;MORE READINGS:&lt;/p&gt;
&lt;p&gt;1.&lt;a href=&quot;http://blog.csdn.net/dlutbrucezhang/article/details/8577810http://blog.csdn.net/dlutbrucezhang/article/details/8577810&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Socket通信原理和实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://hackerxu.com/2014/11/16/TCP.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP三次握手和四次挥手&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;http://www.nowcoder.com/discuss/1778&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP的三次握手，四次挥手&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;https://yq.aliyun.com/articles/9112://&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this_is_bill&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;HTTP请求&quot;&gt;&lt;a href=&quot;#HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求&quot;&gt;&lt;/a&gt;HTTP请求&lt;/h4&gt;&lt;p&gt;HTTP请求一般过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;http客户端发起请求，创建端口&lt;/p&gt;
&lt;/li&gt;
    
    </summary>
    
    
      <category term="net" scheme="http://zachary05.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>网站优化</title>
    <link href="http://zachary05.github.io/2016/06/16/%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96/"/>
    <id>http://zachary05.github.io/2016/06/16/网站优化/</id>
    <published>2016-06-15T16:29:11.000Z</published>
    <updated>2016-07-15T09:10:45.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;网站优化&quot;&gt;&lt;a href=&quot;#网站优化&quot; class=&quot;headerlink&quot; title=&quot;网站优化&quot;&gt;&lt;/a&gt;网站优化&lt;/h3&gt;&lt;h4 id=&quot;1-Optimize-pics&quot;&gt;&lt;a href=&quot;#1-Optimize-pics&quot; class=&quot;headerlink&quot; title=&quot;1.Optimize pics&quot;&gt;&lt;/a&gt;1.Optimize pics&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;主要就是CSS Sprites,把多张图合并在同一张图片中，在用CSS里的background-position进行定位。把HTTP请求降到最低，减缓服务器压力。&lt;/li&gt;
&lt;li&gt;压缩jpg图片，进入PS(shift+alt+command+s)，质量中等45，存储为web所有格式。&lt;/li&gt;
&lt;li&gt;避免空&lt;code&gt;&amp;lt;img src=&amp;quot;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-Optimize-html&quot;&gt;&lt;a href=&quot;#2-Optimize-html&quot; class=&quot;headerlink&quot; title=&quot;2. Optimize html&quot;&gt;&lt;/a&gt;2. Optimize html&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;减少多余的空格，换行，注释；&lt;/li&gt;
&lt;li&gt;减少DOM；&lt;/li&gt;
&lt;li&gt;减少css,js文件数量，和合并就合并；&lt;/li&gt;
&lt;li&gt;css放置head标签内，js放置页面底部；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-Optimize-css-js&quot;&gt;&lt;a href=&quot;#3-Optimize-css-js&quot; class=&quot;headerlink&quot; title=&quot;3.Optimize css/js&quot;&gt;&lt;/a&gt;3.Optimize css/js&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;减少层级关系；&lt;/li&gt;
&lt;li&gt;css代码简写，eg : margin: 1px 2px 3px 4px;&lt;/li&gt;
&lt;li&gt;压缩代码：&lt;a href=&quot;http://tool.chinaz.com/Tools/CssFormat.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;站长工具&lt;/a&gt;，gulp…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://closure-compiler.appspot.com/home&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;谷歌 Closure Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-use-Content-Delivery-Network-CDN&quot;&gt;&lt;a href=&quot;#4-use-Content-Delivery-Network-CDN&quot; class=&quot;headerlink&quot; title=&quot;4.use Content Delivery Network(CDN)&quot;&gt;&lt;/a&gt;4.use Content Delivery Network(CDN)&lt;/h4&gt;&lt;h4 id=&quot;5-No-404s&quot;&gt;&lt;a href=&quot;#5-No-404s&quot; class=&quot;headerlink&quot; title=&quot;5.No 404s&quot;&gt;&lt;/a&gt;5.No 404s&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Getting a useless response&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;6-Reduce-Cookie-Size&quot;&gt;&lt;a href=&quot;#6-Reduce-Cookie-Size&quot; class=&quot;headerlink&quot; title=&quot;6.Reduce Cookie Size&quot;&gt;&lt;/a&gt;6.Reduce Cookie Size&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yuiblog.com/blog/2007/03/01/performance-research-part-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;When the Cookie Crumbles:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eliminate unnecessary cookies&lt;/li&gt;
&lt;li&gt;Keep cookie sizes as low as possible&lt;/li&gt;
&lt;li&gt;Setting cookies at the appropriate domain level so other sub-domains are not affected&lt;/li&gt;
&lt;li&gt;Set an Expires date appropriately.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;7-Make-favicon-ico-Small-and-Cacheable&quot;&gt;&lt;a href=&quot;#7-Make-favicon-ico-Small-and-Cacheable&quot; class=&quot;headerlink&quot; title=&quot;7.Make favicon.ico Small and Cacheable&quot;&gt;&lt;/a&gt;7.Make favicon.ico Small and Cacheable&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;It’s small, preferably under 1K.&lt;/li&gt;
&lt;li&gt;Set Expires header with what you feel comfortable.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;网站优化&quot;&gt;&lt;a href=&quot;#网站优化&quot; class=&quot;headerlink&quot; title=&quot;网站优化&quot;&gt;&lt;/a&gt;网站优化&lt;/h3&gt;&lt;h4 id=&quot;1-Optimize-pics&quot;&gt;&lt;a href=&quot;#1-Optimize-pics&quot; class=&quot;header
    
    </summary>
    
    
      <category term="web" scheme="http://zachary05.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中作用域与闭包</title>
    <link href="http://zachary05.github.io/2016/05/02/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85%E7%AE%80%E7%95%A5%E2%80%9C/"/>
    <id>http://zachary05.github.io/2016/05/02/作用域与闭包简略“/</id>
    <published>2016-05-01T16:31:49.000Z</published>
    <updated>2016-06-19T01:28:18.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;作用域-Scope&quot;&gt;&lt;a href=&quot;#作用域-Scope&quot; class=&quot;headerlink&quot; title=&quot;作用域 (Scope)&quot;&gt;&lt;/a&gt;作用域 (Scope)&lt;/h2&gt;&lt;p&gt;谈到闭包就必然会说到作用域，在JavaScript中，作用域是执行代码的上下文。&lt;/p&gt;
&lt;p&gt;相关概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个函数都有自己的执行环境。每个执行环境都有一个与之关联的变量对象（环境中定义的所有变量都保存在这个对象中）。全局执行环境是最外围的，在Web浏览器中，被认为是window对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当代码在一个环境中执行时，会创建变量对象的一个作用域链，如果这个环境是函数，则将其活动对象作为变量对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;活动对象是什么：活动对象最开始只包含一个变量即arguments对象（全局环境不存在）。作用域中下一个变量对象来自外部环境并一直延续到全局执行环境。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请看下面代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;zachary&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; anotherName = &lt;span class=&quot;string&quot;&gt;&quot;john&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swapName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; yourName = anotherName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        anotherName = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = yourName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这里可以访问name,anotherName,yourName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里可以访问到name,anotherName,但不能访问到yourName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    swapName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这里只能访问到name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;changeName();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码涉及到3个执行环境：全局环境，changeName()局部环境和swapName()局部环境。全局环境中有一个变量name和一个函数changeName()。changeName()函数中有一个局部变量anotherName和一个局部函数swapName()，但它可以访问全局环境中的变量name。swapName()同理。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    c = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//此时，a = 1, b = 3, c = 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                a += b + c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//此时，a = 8, b = 3, c = 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//此时，a = 1, b = 2, c还没定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//此时，a = 8, b = 2;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//此时，a,b,c都没定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在函数中用var声明变量&quot;&gt;&lt;a href=&quot;#在函数中用var声明变量&quot; class=&quot;headerlink&quot; title=&quot;在函数中用var声明变量&quot;&gt;&lt;/a&gt;在函数中用var声明变量&lt;/h3&gt;&lt;p&gt;JavaScript中如果未用var声明的变量作为全局变量。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = &lt;span class=&quot;string&quot;&gt;&#39;zachary&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; yourName = &lt;span class=&quot;string&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name); &lt;span class=&quot;comment&quot;&gt;//zachary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(yourName); &lt;span class=&quot;comment&quot;&gt;//ReferenceError: yourName is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;JavaScript中没有块级作用域&quot;&gt;&lt;a href=&quot;#JavaScript中没有块级作用域&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中没有块级作用域&quot;&gt;&lt;/a&gt;JavaScript中没有块级作用域&lt;/h3&gt;&lt;p&gt;由于逻辑语句如if(){}或for循环语句无法穿件作用域，因此变量可以互相覆盖。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (foo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo); &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        foo = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo); &lt;span class=&quot;comment&quot;&gt;//0,1,2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;作用域链&quot;&gt;&lt;a href=&quot;#作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域链&quot;&gt;&lt;/a&gt;作用域链&lt;/h3&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;function&lt;/span&gt; foo() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;function&lt;/span&gt; bar() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        z = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&lt;span class=&quot;name&quot;&gt;x&lt;/span&gt; + y + z)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)() //6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码中，首先bar()函数在内部查找变量z，后逐级向上查找到y和x，因此最后结果为6。作用域链和原型链区别并不大，都是通过为止体系和分层体系来查找值得方法。&lt;/p&gt;
&lt;h3 id=&quot;作用域链查找返回第一轮值&quot;&gt;&lt;a href=&quot;#作用域链查找返回第一轮值&quot; class=&quot;headerlink&quot; title=&quot;作用域链查找返回第一轮值&quot;&gt;&lt;/a&gt;作用域链查找返回第一轮值&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;zachary&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = &lt;span class=&quot;string&quot;&gt;&quot;john&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = &lt;span class=&quot;string&quot;&gt;&quot;Matthew&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo() &lt;span class=&quot;comment&quot;&gt;//Matthew&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;局部变量name在作用域中是第一个被查找到的，因此不会再查找其余变量。&lt;/p&gt;
&lt;h2 id=&quot;闭包（Closures）&quot;&gt;&lt;a href=&quot;#闭包（Closures）&quot; class=&quot;headerlink&quot; title=&quot;闭包（Closures）&quot;&gt;&lt;/a&gt;闭包（Closures）&lt;/h2&gt;&lt;p&gt;The simple explanation of a Closure is that ECMAScript allows inner functions. And that those inner functions are allowed access to all of the local variables, parameters and declared inner functions within their outer function(s).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;闭包是指由权访问另一个函数作用域中的变量的函数。（因此你可以这样理解：闭包是函数，这个函数有权访问另一个函数作用域中的变量。）&lt;/li&gt;
&lt;li&gt;创建闭包的常见方式就是在一个函数内部创建另一个函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;yourName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myName = yourName(&lt;span class=&quot;string&quot;&gt;&#39;zachary&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myName(); &lt;span class=&quot;comment&quot;&gt;//zachary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来区分一下以下写法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;zachary&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a()();&lt;span class=&quot;comment&quot;&gt;//zachary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&quot;zachary&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a()(); &lt;span class=&quot;comment&quot;&gt;//zachary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight openscad&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;zachary&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a(); &lt;span class=&quot;comment&quot;&gt;//zachary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&quot;zachary&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = a();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c(); &lt;span class=&quot;comment&quot;&gt;//zachary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://bonsaiden.github.io/JavaScript-Garden/zh/#function&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript秘密花园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions#定义函数(Defining_function&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jibbering.com/faq/notes/closures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript Closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/25837367/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript启示录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/11874748/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript语言精粹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/10546125/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript高级程序设计&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;作用域-Scope&quot;&gt;&lt;a href=&quot;#作用域-Scope&quot; class=&quot;headerlink&quot; title=&quot;作用域 (Scope)&quot;&gt;&lt;/a&gt;作用域 (Scope)&lt;/h2&gt;&lt;p&gt;谈到闭包就必然会说到作用域，在JavaScript中，作用域是执行代码的上下
    
    </summary>
    
      <category term="JavaScript" scheme="http://zachary05.github.io/categories/JavaScript/"/>
    
    
      <category term="闭包" scheme="http://zachary05.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>NewStart Zachary_zl</title>
    <link href="http://zachary05.github.io/2016/04/27/newStart/"/>
    <id>http://zachary05.github.io/2016/04/27/newStart/</id>
    <published>2016-04-27T03:07:34.000Z</published>
    <updated>2016-06-15T16:35:34.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;This-is-a-Newly-Start-of-my-Personal-Blog&quot;&gt;&lt;a href=&quot;#This-is-a-Newly-Start-of-my-Personal-Blog&quot; class=&quot;headerlink&quot; title=&quot;This is a Newly Start of my Personal Blog&quot;&gt;&lt;/a&gt;This is a Newly Start of my Personal Blog&lt;/h2&gt;&lt;p&gt;测试&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; This Blog was posted at Wed Apr 27 2016 by Zachary.&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;测试引用 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;小伙伴们你们在哪？请hands up🙌&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hexo n “我的博客” == hexo new “我的博客” #新建文章&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo p == hexo publish&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo g == hexo generate#生成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo s == hexo server #启动服务预览&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo d == hexo deploy#部署&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;This-is-a-Newly-Start-of-my-Personal-Blog&quot;&gt;&lt;a href=&quot;#This-is-a-Newly-Start-of-my-Personal-Blog&quot; class=&quot;headerlink&quot; title=&quot;This is a 
    
    </summary>
    
    
      <category term="Introduction" scheme="http://zachary05.github.io/tags/Introduction/"/>
    
  </entry>
  
</feed>
